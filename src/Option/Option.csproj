<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net45;netstandard1.0;netstandard2.0;</TargetFrameworks>
    <TargetFrameworks Condition="'$(OS)' != 'Windows_NT'">netstandard1.0;netstandard2.0;</TargetFrameworks>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>3.0.2</Version>
    <Authors>Tom Jacques</Authors>
    <PackageLicenseUrl>https://github.com/tejacques/Option/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/tejacques/Option/</PackageProjectUrl>
    <Description>Binaries for the Option type.
        Visit https://github.com/tejacques/Option for an overview and usage examples.</Description>
    <Copyright>Copyright 2018</Copyright>
    <PackageTags>Option Some None Maybe Functional</PackageTags>
    <PackageReleaseNotes>Version Release Notes:

	Version 3.0.2:
         - Now target .NET Standard 1.0

        Version 3.0.1:
         - Fix target to .NET 3.5

        Version 3.0.0:
         - Breaking Changes:
             - Option is now a struct (value type).
             - Option now no longer has subclasses None and Some (since it is a struct)
             - Namespace changed from System.Option to Functional.Option
             - Implicit Conversion from Option&amp;lt;T&amp;gt; to &amp;lt;T&amp;gt; has been removed.
         - Option now implements IEnumerable&amp;lt;T&amp;gt;
         - ToOption() extension method added for regular and Nullable types.
         - Pattern matching is now a function call in the form:
            option.Match(
                None: () =&gt; { /* Action when the Option is None */ },
                Some: value =&gt; { /* Action when the Option is Some&amp;lt;T&amp;gt; */ });

            var result = option.Match(
                None: () =&gt; "None",
                Some: value =&gt; value.ToString());</PackageReleaseNotes>
    <AssemblyVersion>3.0.2.0</AssemblyVersion>
    <FileVersion>3.0.2.0</FileVersion>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\Option.xml</DocumentationFile>
    <OutputPath>bin\Debug\</OutputPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <OutputPath>bin\Release\</OutputPath>
    <DocumentationFile>bin\Release\Option.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="packages\**" />
    <EmbeddedResource Remove="packages\**" />
    <None Remove="packages\**" />
  </ItemGroup>

</Project>
